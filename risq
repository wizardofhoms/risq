#!/usr/bin/env bash
# This script was generated by bashly 0.8.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
risq_usage() {
  if [[ -n $long_usage ]]; then
    printf "risq - RISK AppVM client\n"
    echo

  else
    printf "risq - RISK AppVM client\n"
    echo

  fi

  printf "Usage:\n"
  printf "  risq [command]\n"
  printf "  risq [command] --help | -h\n"
  printf "  risq --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  pass   Use the password-store in vault"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
risq_pass_usage() {
  if [[ -n $long_usage ]]; then
    printf "risq pass - Use the password-store in vault\n"
    echo

  else
    printf "risq pass - Use the password-store in vault\n"
    echo

  fi

  printf "Usage:\n"
  printf "  risq pass [COMMAND] [ARGUMENTS...]\n"
  printf "  risq pass --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  COMMAND"
    printf "    Pass command to use\n"
    echo

    # :argument.usage
    echo "  ARGUMENTS..."
    printf "    Arguments to give to pass program\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/config.sh
config_init() {
    RISQ_CONFIG_FILE=${RISQ_CONFIG_FILE-${RISQ_DIR}/config.ini}
    [[ -f "$RISQ_CONFIG_FILE" ]] || {

        _message "Writing default configuration file to ${RISQ_CONFIG_FILE}"

    cat << EOF > "$RISQ_CONFIG_FILE"

; RISKS AppVM (domU) Configuration file

; You can either edit this file in place, set values
; through the 'risks config' commands.

; Directory mount point for the hush device
HUSH_DIR=/home/user/.hush

; Directory where to store tomb files
GRAVEYARD=/home/user/.graveyard

; Default timeout after which the clipboard is wiped after being filled with passphrase.
PASS_TIMEOUT=45

EOF
    }
}

config_get() {

    local key=$1
    local regex="^$key *= *(.+)$"
    local value=""

    config_init

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ $regex ]]; then
            value="${BASH_REMATCH[2]}" # Changed to 2 because ZSH indexes start at 1
            break
        fi
    done < "$RISQ_CONFIG_FILE"

    echo "$value"
}

config_set() {

    local key=$1
    shift
    local value="$*"

    config_init

    local regex="^($key) *= *.+$"
    local output=""
    local found_key=""
    local newline

    while IFS= read -r line || [ -n "$line" ]; do
        newline=$line
        if [[ $line =~ $regex ]]; then
            found_key="${BASH_REMATCH[2]}"
            newline="$key = $value"
            output="$output$newline\n"
        elif [[ $line ]]; then
            output="$output$line\n"
        fi
    done < "$RISQ_CONFIG_FILE"

    if [[ -z $found_key ]]; then
        output="$output$key = $value\n"
    fi

    printf "%b\n" "$output" > "$RISQ_CONFIG_FILE"
}

config_del() {
    local key=$1

    local regex="^($key) *="
    local output=""

    config_init

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line ]] && [[ ! $line =~ $regex ]]; then
            output="$output$line\n"
        fi
    done < "$RISQ_CONFIG_FILE"

    printf "%b\n" "$output" > "$RISQ_CONFIG_FILE"
}

config_show() {
    config_init
    cat "$RISQ_CONFIG_FILE"
}

config_keys() {
    # zsh compat
    setopt local_options BASH_REMATCH

    local regex="^([a-zA-Z0-9_\-\/\.]+) *="

    config_init

    local keys=()
    local key

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ $regex ]]; then
            key="${BASH_REMATCH[1]}"
            key="${key//\=/}"
            [[ -n "$key" ]] && keys+=("$key")
        fi
    done < "$RISQ_CONFIG_FILE"
    echo "${keys[@]}"
}

config_has_key() {
    [[ $(config_get "$1") ]]
}

# src/lib/pass.sh

# Ask the vault to show the ouput of a password
pass_show ()
{
    local password
    password=$(qvm-pass "${@}" | head -n 1)

	#copies the password to clipboard
	echo -n "${password}" | xclip -selection clipboard
	echo "Password has been saved in clipboard"
	echo "Press CTRL+V to use the content in this qube"
	echo "Press CTRL+SHIFT+C to share the clipboard with another qube"
	echo "In the other qube, press CTRL+SHIFT+v and then CTRL+V to use the clipboard content"
	echo "Local clipboard will be erased is ${PASS_TIMEOUT} seconds"
    ( sleep "${PASS_TIMEOUT}"; echo -n "" |xclip -selection clipboard;) &
}

# Ask the vault to show the output of a password, and clear
# the clipboard after one paste event/action.
pass_show_once ()
{
    local password
    password=$(qvm-pass "${@}" | head -n 1)

	#copies the password to clipboard
	echo -n "${password}" | xclip -selection clipboard -loops 1

	echo "Password has been saved in clipboard"
	echo "Local clipboard will be erased after 1 use"
}

# src/lib/utils.sh

# Return 0 if is set, 1 otherwise
option_is_set() {
    local -i r	 # the return code (0 = set, 1 = unset)

    [[ -n ${(k)OPTS[$1]} ]];
    r=$?

    [[ $2 == "out" ]] && {
        [[ $r == 0 ]] && { print 'set' } || { print 'unset' }
    }

    return $r;
}

# :command.command_functions
# :command.function
risq_pass_command() {
  # src/pass_command.sh

  local command arguments
  command="${args[command]}"
  arguments=( "${args[arguments]}" )

  case "${command}" in
      (show) pass_show_once "${arguments[@]}" ;;
      *) qvm-pass "${arguments[@]}" ;;
  esac

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    risq_usage
    exit
    ;;

  esac

  # :command.dependencies_filter
  if ! [[ -x "$(command -v qvm-pass)" ]]; then
    printf "missing dependency: qvm-pass\n"
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  pass )
    action="pass"
    shift
    risq_pass_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    risq_usage
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action"
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
risq_pass_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    risq_pass_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="pass"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_repeatable
      if [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      elif [[ -z ${args[arguments]+x} ]]; then

        args[arguments]="\"$1\""
        shift
      else
        args[arguments]="${args[arguments]} \"$1\""
        shift
      fi

      ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  

  # src/initialize.sh

  # Connected terminal
  typeset -H _TTY
  GPG_TTY=$(tty)  # Needed for GPG operations
  export GPG_TTY

  # Remove verbose errors when * don't yield any match in ZSH
  setopt +o nomatch

  # The generated script makes use of BASH_REMATCH, set compat for ZSH
  setopt BASH_REMATCH

  # Use colors unless told not to
  { ! option_is_set --no-color } && { autoload -Uz colors && colors }


  # Don't run as root
  if [[ $EUID -eq 0 ]]; then
      echo "This script must be run as user"
      exit 2
  fi

  # Configuration file -------------------------------------------------------------------------------
  #
  # Directory where risk stores its state
  typeset -rg RISQ_DIR="${HOME}/.risq"

  # Create the risk directory if needed
  [[ -e $RISQ_DIR ]] || { mkdir -p $RISQ_DIR && _message "Creating RISKS directory in $RISQ_DIR" }

  # Write the default configuration if it does not exist.
  config_init

  # Default filesystem settings from configuration file ----------------------------------------------

  typeset -gr HUSH_DIR="$(config_get HUSH_DIR)"
  typeset -gr GRAVEYARD="$(config_get GRAVEYARD)"
  typeset -gH PASS_TIMEOUT=$(config_get PASS_TIMEOUT)

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "pass" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      risq_pass_usage
    else
      risq_pass_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
