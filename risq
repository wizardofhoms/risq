#!/usr/bin/env zsh

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
risq_usage() {
  if [[ -n $long_usage ]]; then
    printf "risq - RISKS AppVM client (wrapper around pseudo pass/tomb utils)\n"
    echo

  else
    printf "risq - RISKS AppVM client (wrapper around pseudo pass/tomb utils)\n"
    echo

  fi

  printf "Usage:\n"
  printf "  risq [command]\n"
  printf "  risq [command] --help | -h\n"
  printf "  risq --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  pass     Use the password-store in vault"
  echo "  verify   Verify an onion link signature"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
risq_pass_usage() {
  if [[ -n $long_usage ]]; then
    printf "risq pass - Use the password-store in vault\n"
    echo

  else
    printf "risq pass - Use the password-store in vault\n"
    echo

  fi

  printf "Usage:\n"
  printf "  risq pass [COMMAND] [...]\n"
  printf "  risq pass --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  COMMAND"
    printf "    Pass command to use\n"
    echo

    # :command.footer
    printf "A Qubes-RPC inter-vm client for the pass password manager.\n\npositional arguments:\n  {mv,cp,init,rm,get-or-generate,show,ls,list,generate,insert}\n                        sub-command help (run subcommand with --help as first parameter)\n    mv                  renames / moves a key in the store\n    cp                  renames / copies a key in the store to a new location\n    init                initializes a new pass store if none exists\n    rm                  removes a key in the store\n    get-or-generate     retrieves a key from the password store, generating one if it does not exist\n    show                shows existing password\n    ls (list)           lists passwords\n    generate            generates a key in the password store\n    insert              inserts a new key into the pass store\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DEST_VM, --dest-vm DEST_VM\n                        Set the Qubes domain to operate with.\n\n"
    echo

  fi
}

# :command.usage
risq_verify_usage() {
  if [[ -n $long_usage ]]; then
    printf "risq verify - Verify an onion link signature\n"
    echo

  else
    printf "risq verify - Verify an onion link signature\n"
    echo

  fi

  printf "Usage:\n"
  printf "  risq verify ONION [options]\n"
  printf "  risq verify --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --key, -k"
    printf "    Optional public key file to import in keyring, to check the link against\n"
    echo

    # :flag.usage
    echo "  --verbose, -v"
    printf "    Show verbose logging\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  ONION"
    printf "    onion link to verify (any path component will be removed)\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/config.sh
config_init() {
    RISQ_CONFIG_FILE=${RISQ_CONFIG_FILE-${RISQ_DIR}/config.ini}
    [[ -f "$RISQ_CONFIG_FILE" ]] || {

        _message "Writing default configuration file to ${RISQ_CONFIG_FILE}"

    cat << EOF > "$RISQ_CONFIG_FILE"

; RISKS AppVM (domU) Configuration file

; You can either edit this file in place, set values
; through the 'risks config' commands.

; Directory mount point for the hush device
HUSH_DIR=/home/user/.hush

; Directory where to store tomb files
GRAVEYARD=/home/user/.graveyard

; Default timeout after which the clipboard is wiped after being filled with passphrase.
PASS_TIMEOUT=45

; Tor.taxi onion link is used as an additional source for verifying onion signatures.
TOR_TAXI_ONION=http://tortaxi7axhn2fv4j475a6blv7vwjtpieokolfnojwvkhsnj7sgctkqd.onion

; DarketLive onion link is used as an additional source for verifying onion signatures.
DARKNET_LIVE_ONION=http://darkzzx4avcsuofgfez5zq75cqc4mprjvfqywo45dfcaxrwqg6qrlfid.onion

EOF
    }
}

config_get() {

    local key=$1
    local regex="^$key *= *(.+)$"
    local value=""

    config_init

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ $regex ]]; then
            value="${BASH_REMATCH[2]}" # Changed to 2 because ZSH indexes start at 1
            break
        fi
    done < "$RISQ_CONFIG_FILE"

    echo "$value"
}

config_set() {

    local key=$1
    shift
    local value="$*"

    config_init

    local regex="^($key) *= *.+$"
    local output=""
    local found_key=""
    local newline

    while IFS= read -r line || [ -n "$line" ]; do
        newline=$line
        if [[ $line =~ $regex ]]; then
            found_key="${BASH_REMATCH[2]}"
            newline="$key = $value"
            output="$output$newline\n"
        elif [[ $line ]]; then
            output="$output$line\n"
        fi
    done < "$RISQ_CONFIG_FILE"

    if [[ -z $found_key ]]; then
        output="$output$key = $value\n"
    fi

    printf "%b\n" "$output" > "$RISQ_CONFIG_FILE"
}

config_del() {
    local key=$1

    local regex="^($key) *="
    local output=""

    config_init

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line ]] && [[ ! $line =~ $regex ]]; then
            output="$output$line\n"
        fi
    done < "$RISQ_CONFIG_FILE"

    printf "%b\n" "$output" > "$RISQ_CONFIG_FILE"
}

config_show() {
    config_init
    cat "$RISQ_CONFIG_FILE"
}

config_keys() {
    # zsh compat
    setopt local_options BASH_REMATCH

    local regex="^([a-zA-Z0-9_\-\/\.]+) *="

    config_init

    local keys=()
    local key

    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ $regex ]]; then
            key="${BASH_REMATCH[1]}"
            key="${key//\=/}"
            [[ -n "$key" ]] && keys+=("$key")
        fi
    done < "$RISQ_CONFIG_FILE"
    echo "${keys[@]}"
}

config_has_key() {
    [[ $(config_get "$1") ]]
}

# src/lib/log.sh


# Section is set either by functions or simple calls,
# so that logging can inform on the component working.
section='risks'

# When multiple sections are used within a single risks
# operation, we padd them, for clearer/better aesthetics.
section_padding=0

# Simple way of setting the section and to update the padding
_in_section ()
{
    section="$1"
    if [[ -n "${2}" ]]; then
        section_padding="$2"
    fi
}


function is_verbose_set () {
    if [[ "${args[--verbose]}" -eq 1 ]]; then
        return 0
    else
        return 1
    fi
}

# Messaging function with pretty coloring
function _msg()

{
    # Check if we have been provided a section name,

    # and if not, that the section is set to a default.
    if [[ ${#@} -lt 3 ]]; then
        local progname="$section"
        if [[ -z "$progname" ]]; then
            progname='risks'
        fi
        local msg="$2"
    else
        local progname="$2"
        local msg="$3"
    fi

    # Padd the program/section name
    progname="$(printf %"${section_padding}"s "${progname}")"

    # Apply any translation for non-english users
    # local i
    # command -v gettext 1>/dev/null 2>/dev/null && msg="$(gettext -s "$3")"
    # for i in {3..${#}}; do
    # 	msg=${(S)msg//::$(($i - 2))*::/$*[$i]}
    # done

    local command="print -P"
    local pchars=""
    local pcolor="normal"
    local fd=2
    local -i returncode

    case "$1" in
        inline)
            command+=" -n"; pchars=" > "; pcolor="yellow"
            ;;
        message)
            pchars=" . "; pcolor="white"
            ;;
        verbose)
            pchars="[D]"; pcolor="blue"
            ;;
        success)
            pchars="(*)"; pcolor="green"
            ;;
        warning)
            pchars="[W]"; pcolor="yellow"
            ;;
        failure)
            pchars="[E]"; pcolor="red"
            returncode=1
            ;;
        print)
            progname=""
            fd=1
            ;;
        *)
            pchars="[F]"; pcolor="red"
            msg="Developer oops!  Usage: _msg MESSAGE_TYPE \"MESSAGE_CONTENT\""
            returncode=127
            ;;
    esac

    [[ -n $_MSG_FD_OVERRIDE ]] && fd=$_MSG_FD_OVERRIDE

    # If there is a log-file specified with flag --log-file,
    # output the message to it, instead of the current file descriptor
    logfile="${args[--log-file]}"
    if [[ -n "${logfile}" ]]; then
        ${=command} "${progname}" "${pchars}" "${msg}" >> "$logfile"
        return $returncode
    fi

    # Else, print to stdout, with colors
    if [[ -t $fd ]]; then
        [[ -n "$progname" ]] && progname="$fg[magenta]$progname$reset_color"
        [[ -n "$pchars" ]] && pchars="$fg_bold[$pcolor]$pchars$reset_color"
        msg="$fg[$pcolor]$msg$reset_color"
    fi

    ${=command} "${progname}" "${pchars}" "${msg}" >&"$fd"
    return $returncode
}

function _message() {
    local notice="message"
    [[ "$1" = "-n" ]] && shift && notice="inline"
    option_is_set -q || _msg "$notice" "$@"
    return 0
}

function _verbose() {
    is_verbose_set && _msg verbose "$@"
    return 0
}

function _success() {
    option_is_set -q || _msg success "$@"
    return 0
}

function _warning() {
    option_is_set -q || _msg warning "$@"
    return 1
}

# failure first prints the message we have passed following the catch
# of an error exit code, and then looks at the contents of erroring
# command's stderr buffer, which is printed just below our message.
# We then exit the program.
function _failure()

{
    typeset -i exitcode=${exitv:-1}

    _msg failure "$@"
    if [[ -n "$COMMAND_STDERR" ]]; then
        _msg inline "$COMMAND_STDERR"
    fi

    # Be sure we forget the secrets we were told
    exit "$exitcode"
}

function _print() {
    option_is_set -q || _msg print "$@"
    return 0
}

# src/lib/pass.sh

# Ask the vault to show the ouput of a password
pass_show ()
{
    local password
    password=$(qvm-pass show "${@}" | head -n 1)

    #copies the password to clipboard
    echo -n "${password}" | xclip -selection clipboard
    echo "Password has been saved in clipboard"
    echo "Press CTRL+V to use the content in this qube"
    echo "Press CTRL+SHIFT+C to share the clipboard with another qube"
    echo "In the other qube, press CTRL+SHIFT+v and then CTRL+V to use the clipboard content"
    echo "Local clipboard will be erased is ${PASS_TIMEOUT} seconds"
    ( sleep "${PASS_TIMEOUT}"; echo -n "" |xclip -selection clipboard;) &
}

# Ask the vault to show the output of a password, and clear
# the clipboard after one paste event/action.
pass_show_once ()
{
    local password
    password=$(qvm-pass show "${@}" | head -n 1)

    #copies the password to clipboard
    echo -n "${password}" | xclip -selection clipboard -loops 1

    echo "Password has been saved in clipboard"
    echo "Local clipboard will be erased after 1 use"
}

# src/lib/run.sh

COMMAND_STDOUT=''           # Stores a command's stdout output.
COMMAND_STDERR=''           # Stores a command's stderr output.

# do a command, splitting and storing stdout/stderr output and printing
# the former to screen only if the command is ran with verbose flag.
# Returns the command's exit code, so we can catch any errors and inform.
_run ()
{
    # The STDOUT/STDERR variables are populated, which
    # makes their content available to any subsequent call
    # to _failure, which needs STDERR output
    {
        IFS=$'\n' read -r -d '' COMMAND_STDERR;
        IFS=$'\n' read -r -d '' COMMAND_STDOUT;
        (IFS=$'\n' read -r -d '' _ERRNO_; exit "${_ERRNO_}");
    } < <((printf '\0%s\0%d\0' "$("$@")" "${?}" 1>&2) 2>&1)

    local ret="$?"

    # Output the command's result depending on the verbose mode
    # and if the command ran successfully. We check that either
    # stdout or stderr are non-empty: sometimes commands might
    # output to stderr, like wipe.
    if [[ $ret -eq 0 ]] && is_verbose_set ; then
        if [[ -n "$COMMAND_STDOUT" ]]; then
            _verbose "$COMMAND_STDOUT"
        fi
    fi

    # Return the command's exit code
    return $ret
}

# Checks the return code of a command, and if not successful,
# fails with the associated error message. Usage:
# catch $ret "hush" "Failed to execute this command"
function _catch ()
{
    local ret="$?"

    if [[ ! $ret -eq 0 ]]; then
        _failure "$@"
    fi
}

# src/lib/url.sh

# get_url_host removes the protocol, path and ports from a URI and returns the result
get_url_host ()
{
    # url="$1"

    protocol=$(echo "$1" | grep "://" | sed -e's,^\(.*://\).*,\1,g')
    # Remove the protocol
    url_no_protocol=$(echo "${1/$protocol/}")
    # Use tr: Make the protocol lower-case for easy string compare
    protocol=$(echo "$protocol" | tr '[:upper:]' '[:lower:]')

    # Extract the user and password (if any)
    # cut 1: Remove the path part to prevent @ in the querystring from breaking the next cut
    # rev: Reverse string so cut -f1 takes the (reversed) rightmost field, and -f2- is what we want
    # cut 2: Remove the host:port
    # rev: Undo the first rev above

    userpass=$(echo "$url_no_protocol" | grep "@" | cut -d"/" -f1 | rev | cut -d"@" -f2- | rev)
    # pass=$(echo "$userpass" | grep ":" | cut -d":" -f2)
    # if [ -n "$pass" ]; then
    #     user=$(echo "$userpass" | grep ":" | cut -d":" -f1)
    # else
    #     user="$userpass"
    # fi

    # Extract the host
    hostport=$(echo "${url_no_protocol/$userpass@/}" | cut -d"/" -f1)
    host=$(echo "$hostport" | cut -d":" -f1)
    # port=$(echo "$hostport" | grep ":" | cut -d":" -f2)
    # path=$(echo "$url_no_protocol" | grep "/" | cut -d"/" -f2-)

    # Print the URL host string
    print "$host"
}

# src/lib/utils.sh

# Return 0 if is set, 1 otherwise
option_is_set() {
    local -i r	 # the return code (0 = set, 1 = unset)

    [[ -n ${(k)OPTS[$1]} ]];
    r=$?

    [[ $2 == "out" ]] && {
        [[ $r == 0 ]] && { print 'set' } || { print 'unset' }
    }

    return $r;
}

# src/lib/validations/url.sh

# validate_onion_v3 accepts a URL host location (without path)
# and check that it is a valid Onion V3 link.
validate_onion_v3 ()
{
    local host

    # First trim any path and protocol from the link
    host="$(get_url_host "$1")"

    if [[ ! "$host" =~ ^[a-z2-7]{56}.onion ]] ; then
        echo "URL is not a valid Onion V3 link"
    fi
}

# :command.command_functions
# :command.function
risq_pass_command() {
  # src/pass_command.sh

  local command arguments

  command="${args[command]}"
  arguments=( "${other_args[@]}" )

  case "${command}" in
      (show) pass_show_once "${arguments[@]}" ;;
      *) qvm-pass "$command" "${arguments[@]}" ;;
  esac

}

# :command.function
risq_verify_command() {
  # src/verify_command.sh

  local onion host tmp

  # The onion argument has been validated as an onion V3 link already,
  # but we still need the host string without any URL path component.
  onion="${args[onion]}"
  host="$(get_url_host "$onion")"

  _message "Verifying Onion link"

  # Fist locate ourselves in a temp directory in which to download stuff
  tmp="$(mktemp -d -q --suffix risq)"
  cd "$tmp" || _failure "Failed to cd into temp directory $tmp"

  # 1 - Get the GPG public key associated to this onion. =================================================
  # * Either ghlkgfjlf.onion/pgp.txt
  # * Or specified with --key flag
  # * Or we might already have a key in our keyring for this: either fallback to this or check if we have one.
  _message "Fetching GPG public keys"
  _run torify wget "${host}/pgp.txt"
  [[ $? ]] || _warning "Failed to fetch onion/gpg.txt"

  # 2 - Get the signature file for this onion (generally mirrors.txt) ====================================
  # In this signature file we must:
  # - Find all onion links.
  # - Find that one of those links matches the link we passed as argument.
  _message "Fetching signature file and ensuring URL match"
  _run torify wget "${host}/mirrors.txt"
  [[ $? ]] || _warning "Failed to fetch onion/mirrors.txt"

  # 3 - Try to locate relevant data on tor.taxi ==========================================================

  # - Get the contents of "sitenames"
  # - Grep a line with the name of the site
  # - Get the last part of this line, containing the corresponding URL path
  # - Append path to tor.taxi onion
  # - Fetch the corresponding mirrors.txt file
  # - Grep everything between BEGIN_PGP_SIGNED_MESSAGE and ENG_PGP_SIGNATURE
  # - Compare with the one we have fetched on the site itself.

  # Also, check /avoid websites to see if it matches

  # 3bis - Try to locate relevant data on DarknetLive ====================================================

  # 4 - Import the GPG public key in our vault keyring ===================================================
  _message "Importing GPG public key in keyring"

  # 5 - Check the signature file against the newly imported key. =========================================
  _message "Verifying signatures match"
  # qubes-gpg-import-key

  # Clean up tmp dir
  cd && _run shred -u "$tmp"

  # 5 - At this point, in all likelihood our site is legit
  _success "Onion URL verified against GPG key"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    risq_usage
    exit
    ;;

  esac

  # :command.dependencies_filter
  if ! [[ -x "$(command -v qvm-pass)" ]]; then
    printf "missing dependency: qvm-pass\n"
    exit 1
  fi
  if ! [[ -x "$(command -v qubes-gpg-client-wrapper)" ]]; then
    printf "missing dependency: qubes-gpg-client-wrapper\n"
    exit 1
  fi
  if ! [[ -x "$(command -v qubes-gpg-import-key)" ]]; then
    printf "missing dependency: qubes-gpg-import-key\n"
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  pass )
    action="pass"
    shift
    risq_pass_parse_requirements "$@"
    shift $#
    ;;

  verify )
    action="verify"
    shift
    risq_verify_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    risq_usage
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action"
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
risq_pass_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    risq_pass_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="pass"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_catch_all
      if [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi

      ;;

    esac
  done

}

# :command.parse_requirements
risq_verify_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    risq_verify_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="verify"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --key | -k )

      # :flag.case_no_arg
      args[--key]=1
      shift
      ;;

    # :flag.case
    --verbose | -v )

      # :flag.case_no_arg
      args[--verbose]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[onion]+x} ]]; then
        # :argument.validations
        if [[ -n $(validate_onion_v3 "$1") ]]; then
          printf "validation error in %s:\n%s\n" "ONION" "$(validate_onion_v3 "$1")"
          exit 1
        fi

        args[onion]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[onion]+x} ]]; then
    printf "missing required argument: ONION\nusage: risq verify ONION [options]\n"
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  

  # src/initialize.sh

  # Connected terminal
  typeset -H _TTY
  GPG_TTY=$(tty)  # Needed for GPG operations
  export GPG_TTY

  # Remove verbose errors when * don't yield any match in ZSH
  setopt +o nomatch

  # The generated script makes use of BASH_REMATCH, set compat for ZSH
  setopt BASH_REMATCH

  # Use colors unless told not to
  { ! option_is_set --no-color } && { autoload -Uz colors && colors }


  # Don't run as root
  if [[ $EUID -eq 0 ]]; then
      echo "This script must be run as user"
      exit 2
  fi

  # Configuration file -------------------------------------------------------------------------------
  #
  # Directory where risk stores its state
  typeset -rg RISQ_DIR="${HOME}/.risq"

  # Create the risk directory if needed
  [[ -e $RISQ_DIR ]] || { mkdir -p $RISQ_DIR && _message "Creating RISKS directory in $RISQ_DIR" }

  # Write the default configuration if it does not exist.
  config_init

  # Default filesystem settings from configuration file ----------------------------------------------

  typeset -gr HUSH_DIR="$(config_get HUSH_DIR)"
  typeset -gr GRAVEYARD="$(config_get GRAVEYARD)"
  typeset -gH PASS_TIMEOUT=$(config_get PASS_TIMEOUT)

  # Other constants ----------------------------------------------------------------------------------

  typeset -gr TOR_TAXI_ONION=$(config_get TOR_TAXI_ONION)
  typeset -gr DARKNET_LIVE_ONION=$(config_get DARKNET_LIVE_ONION)

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "pass" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      risq_pass_usage
    else
      risq_pass_command
    fi

  elif [[ $action == "verify" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      risq_verify_usage
    else
      risq_verify_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
